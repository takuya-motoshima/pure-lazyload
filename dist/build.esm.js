!function(r,e){void 0===e&&(e={});var t=e.insertAt;if(r&&"undefined"!=typeof document){var n=document.head||document.getElementsByTagName("head")[0],i=document.createElement("style");i.type="text/css","top"===t&&n.firstChild?n.insertBefore(i,n.firstChild):n.appendChild(i),i.styleSheet?i.styleSheet.cssText=r:i.appendChild(document.createTextNode(r))}}(".lz-wrap {\r\n  background-color: rgb(240, 237, 234);\r\n}\r\n\r\n  .lz-wrap img {\r\n    z-index: 1;\r\n  }\r\n\r\n  .lz-wrap .lz-spinner {\r\n    position: absolute;\r\n    z-index: 2;\r\n    top: calc(50% - 16px / 2);\r\n    left: calc(50% - 16px / 2);\r\n    border-radius: 50%;\r\n    width: 16px;\r\n    height: 16px;\r\n    border-top: calc(16px * .11) solid rgba(29,161,242,.2);\r\n    border-right: calc(16px * .11) solid rgba(29,161,242,.2);\r\n    border-bottom: calc(16px * .11) solid rgba(29,161,242,.2);\r\n    border-left: calc(16px * .11) solid rgb(29,161,242);\r\n    transform: translate(0);\r\n    animation: lz-spinner 1.1s infinite linear;\r\n  }\r\n\r\n  @keyframes lz-spinner {\r\n    0% {\r\n      transform: rotate(0deg);\r\n    }\r\n    100% {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n\r\n.lz-gallery {\r\n  display: grid;\r\n  grid-auto-flow: dense;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  grid-auto-rows: 200px;\r\n  grid-gap: 10px;\r\n  padding: 10px;\r\n}\r\n\r\n  .lz-gallery .lz-gallery-item {\r\n    margin: 0;\r\n    padding: 0;\r\n    grid-area: span 1/span 1\r\n  }\r\n\r\n  .lz-gallery .lz-gallery-item-horizontal {\r\n    grid-area: span 1/span 2;\r\n  }\r\n\r\n  .lz-gallery .lz-gallery-item-big {\r\n    grid-area: span 2/span 2;\r\n  }\r\n\r\n  .lz-gallery .lz-gallery-item-vertical {\r\n    grid-area: span 2/span 1;\r\n  }\r\n\r\n    .lz-gallery .lz-gallery-item img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n");class r{static observe(r,e){if(e=Object.assign({root:null,rootMargin:"0px",background:"random",debugging:!1},e||{}),window.IntersectionObserver){this.debugging=e.debugging,this.io=new IntersectionObserver(r=>{for(let e of r)if(e.intersectionRatio>0||e.isIntersecting){const r=e.target;this.io.unobserve(r);let t=r.getAttribute("data-src");if(!t)return;r.setAttribute("src",t),(r=>{r.addEventListener("load",()=>{this.debug("Loaded image "+r.getAttribute("src"));const e=r.parentNode,t=e.parentNode;t.insertBefore(r,e),t.removeChild(e),r.style.visibility=r.dataset.originalVisibility,r.removeAttribute("data-original-visibility")},!1)})(r)}},{root:e.root,rootMargin:e.rootMargin,threshold:0});for(let t of r){const r=document.createElement("div");r.classList.add("lz-wrap"),r.style.backgroundColor="random"===e.background?"#"+Math.floor(16777215*Math.random()).toString(16):e.background;const n=Object.assign({},getComputedStyle(t));r.style.position="static"!==n.position?n.position:"relative",r.style.display="inline"===n.display?"inline-block":n.display,r.style.width=n.width,r.style.height=n.height,r.style.margin=n.margin,r.style.zIndex=n.zIndex,r.style.top=n.top,r.style.right=n.right,r.style.bottom=n.bottom,r.style.left=n.left,t.dataset.originalVisibility=n.visibility,t.style.visibility="hidden";const i=document.createElement("div");i.classList.add("lz-spinner"),i.style.zIndex="2",t.before(r),r.append(t,i)}for(let e of r)this.io.observe(e)}else console.warn("This browser does not support lazy load")}static destroy(){this.io&&(this.io.disconnect(),this.io=void 0)}static debug(...r){this.debugging&&console.log.apply(console,r)}}r.io=void 0,r.debugging=!1;export default r;
